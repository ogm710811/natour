@import "../abstracts/mixins";
@import "../abstracts/variables";

[class^="col-"] {
	float: left;

	&:not(:last-child) {
		margin-right: $gutter-horizontal;

		// since the columns are not yet side by side
		// we don't need margin-right but margin-bottom
		// to separate them
		@include responsive(tabPort) {
			margin-right: 0;
			margin-bottom: $gutter-vertical-small;
		}
	}

	// starting on tablet portrait screen columns
	// will take 100% of the width not will be calculated
	@include responsive(tabPort) {
		width: 100% !important;
	}
}

.row {
	max-width: $grid-width;
	margin: 0 auto;

	// changing max-width of the grid for
	// small screens and adding padding
	@include responsive(tabPort) {
		max-width: $grid-width-small;
		padding: 0 3rem;
	}

	&:not(:last-child) {
		margin-bottom: $gutter-vertical-large;

		// giving a small gutter vertical
		@include responsive(tabPort) {
			margin-bottom: $gutter-vertical-small;
		}
	}

	@include clearfix;

	.col-1-of-2 {
		width: calc((100% - #{$gutter-horizontal}) / 2);
	}

	.col-1-of-3 {
		width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
	}

	.col-2-of-3 {
		width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
	}

	.col-1-of-4 {
		width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
	}

	.col-2-of-4 {
		width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
	}

	.col-3-of-4 {
		width: calc((3 * (100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
	}
}


